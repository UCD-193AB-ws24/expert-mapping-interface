name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    
jobs:
  # --- Job 1: Build, Test, and Process Data ---
  build-and-test:
    runs-on: ubuntu-latest 

    steps:
      # Fetches the latest code from the repository branch that triggered the workflow.
      - name: Checkout code
        uses: actions/checkout@v4

      # Installs the specified version of Node.js and configures caching for npm dependencies.
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      # Installs all necessary Node.js packages defined in package-lock.json.
      - name: Install dependencies
        run: npm install

      # Run tests before building to ensure code quality
      - name: Run tests
        run: npm test
        continue-on-error: false

      # Compiles the React frontend code into static assets for deployment.
      - name: Build project
        run: npm run build
        continue-on-error: false

  # --- Job 2: Build Docker Image ---
  build-docker-image:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          docker build -f ./Dockerfile.emi -t emi:ci-build -t emi:latest .
          docker save emi:ci-build -o emi.tar
      
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: emi.tar
          retention-days: 1

  # --- Job 3: Deploy Docker Image to VM ---
  deploy-to-vm:
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    if: github.ref == 'refs/heads/main'
    environment:
      name: webserver-prod
    
    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./
      
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.VM_KNOWN_HOSTS }}
      
      - name: SCP transfer Docker image to VM
        run: |
          scp -o StrictHostKeyChecking=no ./emi.tar ${{ secrets.VM_USER }}@${{ secrets.WEBSERVER_HOST }}:~/
      
      - name: Deploy Docker image on VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.WEBSERVER_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            cd ~/expert-mapping-interface
            docker compose down || true
            docker rm -f emi-app || true
            docker load -i ~/emi.tar
            docker tag emi:ci-build emi:latest
            docker compose up -d